plugins {
	id 'com.avast.gradle.docker-compose' version "0.14.0"
	id 'org.springframework.boot' version '2.5.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'org.asciidoctor.convert' version '1.5.8'
	id 'java'
}

group = 'com.github.prbpedro'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencyManagement {
	imports {
		mavenBom 'io.awspring.cloud:spring-cloud-aws-dependencies:2.3.2'
	}
}

dependencies {
	implementation platform('software.amazon.awssdk:bom:2.15.0')

	//Spring
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'io.awspring.cloud:spring-cloud-starter-aws-messaging'

	//Aws
	implementation 'software.amazon.awssdk:sns'
	implementation 'software.amazon.awssdk:sqs'

	//Vertex.io
	implementation group: 'dev.snowdrop', name: 'vertx-spring-boot-starter-http', version: '1.2.0'

	//Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	//mysql r2dbc
	runtimeOnly 'dev.miku:r2dbc-mysql'
	runtimeOnly 'mysql:mysql-connector-java'

	//swagger
	implementation group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'
	implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'

	//test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.awaitility:awaitility:3.1.2'
}

dockerCompose {

	runAppInfrastructure {
		useComposeFiles = ['docker-compose.yml']
		captureContainersOutput = true
		removeContainers = true
	}
}

def defaultEnvironmentVariables = ["JAVA_SPRINGBOOT_REACTIVE_API_EXEMPLE_MYSQL_SERVICE_HOST": "localhost",
								   "JAVA_SPRINGBOOT_REACTIVE_API_EXEMPLE_MYSQL_SERVICE_PORT": "3306",
								   "JAVA_SPRINGBOOT_REACTIVE_API_EXEMPLE_MYSQL_SERVICE_DATABASE": "dumb_db",
								   "JAVA_SPRINGBOOT_REACTIVE_API_EXEMPLE_MYSQL_READONLY_SERVICE_USER": "readonlyuser",
								   "JAVA_SPRINGBOOT_REACTIVE_API_EXEMPLE_MYSQL_READONLY_SERVICE_PASSWORD": "password",
								   "JAVA_SPRINGBOOT_REACTIVE_API_EXEMPLE_MYSQL_WRITE_SERVICE_USER": "root",
								   "JAVA_SPRINGBOOT_REACTIVE_API_EXEMPLE_MYSQL_WRITE_SERVICE_PASSWORD": "password",
								   "AWS_SNS_ENDPOINT": "http://localhost:4566",
								   "AWS_SQS_ENDPOINT": "http://localhost:4566",
								   "AWS_ACCESS_KEY_ID": "FAKE",
								   "AWS_SECRET_ACCESS_KEY": "FAKE",
								   "AWS_REGION": "us-east-1"]

bootRun {
	environment = defaultEnvironmentVariables
}

test {
	environment = defaultEnvironmentVariables

	outputs.dir snippetsDir
	useJUnitPlatform()
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}
